services:
    PasswordManager_platform.antispam:
        class: PasswordManager\Bundle\PlatformBundle\Antispam\PasswordManagerAntispam
        arguments:  ["@mailer", "locale", 50]

    PasswordManager_platform..doctrine.notification:
        class: PasswordManager\Bundle\PlatformBundle\DoctrineListener\ApplicationNotification
        arguments: ["@mailer"]
        tags:
            - { name: doctrine.event_listener, event: postPersist }
#    password_manager_platform.example:
#        class: PasswordManager\Bundle\PlatformBundle\Example
#        arguments: ["@service_id", "plain_value", "%parameter%"]

    PasswordManager_platform.validator.antiflood:                              # Le nom du service
        class: PasswordManager\Bundle\PlatformBundle\Validator\AntifloodValidator     # La classe du service, ici notre validateur déjà créé
        arguments: ["@request_stack", "@doctrine.orm.entity_manager"] # Les données qu'on injecte au service : la requête et l'EntityManager
        tags:
            - { name: validator.constraint_validator, alias: passwordManager_platform_antiflood }  # C'est avec l'alias qu'on retrouvera le service

    password_manager_core.currentuser:
        class: PasswordManager\Bundle\PlatformBundle\Currentuser\Currentuser

#    app.my.form.type:
#        class: PasswordManager\Bundle\PlatformBundle\Form # this is your form type class
#        arguments:
#            - '@my.service' # this is the ID of the service you want to inject
#        tags:
#            - { name: form.type }
